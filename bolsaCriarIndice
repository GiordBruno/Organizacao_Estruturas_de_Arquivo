import struct
import hashlib
import os
import sys

hashSize = 15485867
keyColumnIndex = 7
def h(key):
    global hashSize
    return int(hashlib.sha1(key).hexdigest(),16)%hashSize

def bolsaIndice(x,y):
    hashSize = 15485867
    fileName = x
    indexName = y
    indexFormat = "14sLL"
    indexStruct = struct.Struct(indexFormat)

    bolsaIndice(str(sys.argv[1]), str(sys.argv[2]))

    fi = open(indexName, "wb")
    emptyIndexRecord = indexStruct.pack("", 0, 0)
    for i in range(0, hashSize):
        fi.write(emptyIndexRecord)
    fi.close()

    f = open(fileName, "r")
    fi = open(indexName, "r+b")

    fi.seek(0, os.SEEK_END)
    fileIndexSize = fi.tell()
    print "fileIndexSize", fileIndexSize
    f.readline()

    recordNumber = 0
    while True:
        recordNumber = f.tell()
        line = f.readline()
        splitLine = line.split('\t')
        if recordNumber == 100:  # EOF
            break
        p = h(splitLine[keyColumnIndex])
        fi.seek(p * indexStruct.size, os.SEEK_SET)
        indexRecord = indexStruct.unpack(fi.read(indexStruct.size))
        fi.seek(p * indexStruct.size, os.SEEK_SET)
        if indexRecord[0][0] == "\0":
            fi.write(indexStruct.pack(splitLine[keyColumnIndex], recordNumber, 0))
        else:
            nextPointer = indexRecord[2]
            fi.write(indexStruct.pack(indexRecord[0], indexRecord[1], fileIndexSize))
            fi.seek(0, os.SEEK_END)
            fi.write(indexStruct.pack(splitLine[keyColumnIndex], recordNumber, nextPointer))
            fileIndexSize = fi.tell()
        recordNumber += 1
    f.close()
    fi.close()


